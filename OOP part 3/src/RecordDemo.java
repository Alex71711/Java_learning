// –§–∞–π–ª: RecordDemo.java

//–ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω record ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è ¬´DTO –∫–ª–∞—Å—Å–æ–≤¬ª (—Ç–æ–ª—å–∫–æ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö).
//
//–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç toString, equals, hashCode, –≥–µ—Ç—Ç–µ—Ä—ã.
//
//üìå –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ:
//
//–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö (UserDTO, OrderDTO).
//
//–í REST API —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç records.

// record –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª—è, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, toString, equals, hashCode
record Person(String name, int age) {}

public class RecordDemo {
    public static void main(String[] args) {
        Person p1 = new Person("–ò–≤–∞–Ω", 25);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≥–µ—Ç—Ç–µ—Ä—ã (name(), age())
        System.out.println("–ò–º—è: " + p1.name());
        System.out.println("–í–æ–∑—Ä–∞—Å—Ç: " + p1.age());

        // toString()
        System.out.println(p1);

        // equals() –∏ hashCode() —Ç–æ–∂–µ –µ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        Person p2 = new Person("–ò–≤–∞–Ω", 25);
        System.out.println("p1.equals(p2)? " + p1.equals(p2));
    }
}
